#include <stdio.h>

#define MAX 100

int parent[MAX];

int find(int x) {
    if (parent[x] != x)
        parent[x] = find(parent[x]);
    return parent[x];
}

void union_sets(int a, int b) {
    int rootA = find(a);
    int rootB = find(b);
    if (rootA != rootB) {
        parent[rootB] = rootA;
    }
}

int main() {
    int n, e;
    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &n, &e);

    int u[e], v[e], w[e];

    printf("Enter each edge as: from to weight\n");
    for (int i = 0; i < e; i++) {
        scanf("%d %d %d", &u[i], &v[i], &w[i]);
    }

    for (int i = 0; i < n; i++)
        parent[i] = i;

    // Bubble sort edges by weight
    for (int i = 0; i < e - 1; i++) {
        for (int j = 0; j < e - i - 1; j++) {
            if (w[j] > w[j + 1]) {
                int temp;

                temp = w[j]; w[j] = w[j + 1]; w[j + 1] = temp;
                temp = u[j]; u[j] = u[j + 1]; u[j + 1] = temp;
                temp = v[j]; v[j] = v[j + 1]; v[j + 1] = temp;
            }
        }
    }

    int cost = 0;
    printf("Edges in MST:\n");
    for (int i = 0; i < e; i++) {
        if (find(u[i]) != find(v[i])) {
            printf("%d - %d : %d\n", u[i], v[i], w[i]);
            cost += w[i];
            union_sets(u[i], v[i]);
        }
    }

    printf("Total cost: %d\n", cost);

    return 0;
}
